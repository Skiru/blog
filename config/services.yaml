parameters:
    ecorp_idp_login_url: '%env(ECORP_IDP_LOGIN_URL)%'
    ecorp_client_id: '%env(ECORP_CLIENT_ID)%'
    ecorp_client_secret: '%env(ECORP_CLIENT_SECRET)%'
    ecorp_authorize_uri: '%env(ECORP_AUTHORIZE_URI)%'
    ecorp_token_uri: '%env(ECORP_TOKEN_URI)%'
    ecorp_redirect_uri: '%env(ECORP_REDIRECT_URI)%'
    mongodb_connection_uri: '%env(MONGODB_CONNECTION)%'
    upload_file_url: '%env(ASSETS_URL)%/assets/uploads'
    upload_file_path: '%kernel.project_dir%/public/assets/uploads'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    #App\Infrastructure\Security\TokenAuthenticator: ['%ecorp_idp_login_url%']

    App\Infrastructure\CommandBus\CommandBus:
        calls:
            - [registerHandler, ['App\Application\Post\Command\PostCreateCommand', '@App\Application\Post\Command\PostCreateCommandHandler']]
            - [registerHandler, ['App\Application\Post\Command\PostUpdateCommand', '@App\Application\Post\Command\PostUpdateCommandHandler']]
            - [registerHandler, ['App\Application\Tag\Command\TagCreateCommand', '@App\Application\Tag\Command\TagCreateCommandHandler']]
            - [registerHandler, ['App\Application\Tag\Command\TagDeleteCommand', '@App\Application\Tag\Command\TagDeleteCommandHandler']]
            - [registerHandler, ['App\Application\Tag\Command\TagUpdateCommand', '@App\Application\Tag\Command\TagUpdateCommandHandler']]
            - [registerHandler, ['App\Application\Category\Command\CategoryCreateCommand', '@App\Application\Category\Command\CategoryCreateCommandHandler']]
            - [registerHandler, ['App\Application\Post\Command\PostDeleteCommand', '@App\Application\Post\Command\PostDeleteCommandHandler']]

    App\Infrastructure\ECorp\Connector:
        arguments: ['%ecorp_client_id%', '%ecorp_client_secret%', '%ecorp_authorize_uri%', '%ecorp_token_uri%', '%ecorp_redirect_uri%']

    MongoDB\Client:
        arguments: ['%mongodb_connection_uri%']

    App\Infrastructure\ImageUploader:
        arguments: ['%upload_file_path%','%upload_file_url%', '@Symfony\Component\String\Slugger\SluggerInterface']

    Symfony\Component\Serializer\Normalizer\ObjectNormalizer:
        arguments:
            - null
            - '@serializer.name_converter.camel_case_to_snake_case'

    Symfony\Component\Serializer\Encoder\JsonEncoder: ~

    Symfony\Component\Serializer\Serializer:
        arguments:
            $normalizers:
                - '@Symfony\Component\Serializer\Normalizer\ObjectNormalizer'
            $encoders:
                - '@Symfony\Component\Serializer\Encoder\JsonEncoder'
